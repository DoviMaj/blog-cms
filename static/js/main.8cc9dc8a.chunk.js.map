{"version":3,"sources":["pages/LoginPage.jsx","components/Post.jsx","pages/Home.jsx","pages/EditPost.js","pages/NewPost.jsx","components/Nav.js","Routes.js","reportWebVitals.js","index.js"],"names":["LoginForm","setUserAuth","useForm","register","handleSubmit","errors","useState","loginErr","setLoginErr","onSubmit","data","a","formData","JSON","stringify","fetch","method","body","headers","Accept","req","json","myJson","status","localStorage","setItem","token","Form","className","Group","Label","htmlFor","Control","autoComplete","name","type","placeholder","ref","required","username","Text","message","password","Button","onClick","Post","post","match","useRouteMatch","Card","style","width","padding","borderRadius","maxHeight","overflow","textOverflow","Title","title","variant","to","url","_id","Body","text","Home","posts","setPosts","useEffect","reqJson","getPosts","display","gap","flexWrap","map","EditPost","setPost","comments","setComments","successMsg","setSuccessMsg","history","useHistory","id","useParams","getComments","submitForm","getItem","bearer","Authorization","deletePost","deleteAllComments","push","console","error","deleteComment","commentId","newComments","filter","comment","defaultValue","as","author_name","margin","NewPost","theNav","userAuth","Navbar","Brand","Nav","Link","clear","Routes","user","Container","Row","Col","exact","path","LoginPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","document","getElementById"],"mappings":"+OA4EeA,EAvEG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACMC,cAAnCC,EAD6B,EAC7BA,SAAUC,EADmB,EACnBA,aAAcC,EADK,EACLA,OADK,EAELC,oBAAS,GAFJ,mBAE9BC,EAF8B,KAEpBC,EAFoB,KAI/BC,EAAQ,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACTC,EAAWC,KAAKC,UAAUJ,GADjB,kBAGKK,MAChB,mDACA,CACEC,OAAQ,OACRC,KAAML,EACNM,QAAS,CACPC,OAAQ,mBACR,eAAgB,sBAVT,cAGPC,EAHO,gBAcQA,EAAIC,OAdZ,UAcPC,EAdO,OAeM,MAAfF,EAAIG,OAfK,wBAgBXf,GAAY,GAhBD,2BAmBbgB,aAAaC,QAAQ,QAASH,EAAOI,OACrCF,aAAaC,QAAQ,YAAY,GACjCxB,GAAY,GArBC,kDAuBbO,GAAY,GAvBC,0DAAH,sDA2Bd,OACE,eAACmB,EAAA,EAAD,CAAMC,UAAU,SAAhB,UACE,uCACA,eAACD,EAAA,EAAKE,MAAN,WACE,cAACF,EAAA,EAAKG,MAAN,CAAYC,QAAQ,cAApB,mBACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,aAAa,WACbC,KAAK,WACLC,KAAK,OACLC,YAAY,OACZC,IAAKlC,EAAS,CAAEmC,SAAU,qBAE3BjC,EAAOkC,UAAY,cAACZ,EAAA,EAAKa,KAAN,UAAYnC,EAAOkC,SAASE,aAGlD,eAACd,EAAA,EAAKE,MAAN,WACE,cAACF,EAAA,EAAKG,MAAN,CAAYC,QAAQ,WAAWK,YAAY,WAA3C,uBAGA,cAACT,EAAA,EAAKK,QAAN,CACEC,aAAa,mBACbC,KAAK,WACLC,KAAK,WACLE,IAAKlC,EAAS,CAAEmC,SAAU,qBAG3BjC,EAAOqC,UAAY,eAACf,EAAA,EAAKa,KAAN,WAAYnC,EAAOqC,SAASD,QAA5B,UAGrBlC,GAAY,cAACoB,EAAA,EAAKa,KAAN,6CACb,cAACG,EAAA,EAAD,CACER,KAAK,SACLS,QAAqCxC,EAAaK,GAFpD,uB,QCvCSoC,EAtBF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACVC,EAAQC,cACZ,OACE,eAACC,EAAA,EAAD,CACEC,MAAO,CACLC,MAAO,QACPC,QAAS,OACTC,aAAc,OACdC,UAAW,QACXC,SAAU,SACVC,aAAc,YAPlB,UAUE,cAACP,EAAA,EAAKQ,MAAN,UAAaX,EAAKY,QAClB,cAACf,EAAA,EAAD,CAAQgB,QAAQ,OAAhB,SACE,cAAC,OAAD,CAAMC,GAAE,UAAKb,EAAMc,IAAX,YAAkBf,EAAKgB,KAA/B,0BAEF,eAACb,EAAA,EAAKc,KAAN,WAAYjB,EAAKkB,KAAjB,WCUSC,EA7BF,WAAO,IAAD,EACS3D,qBADT,mBACV4D,EADU,KACHC,EADG,KAiBjB,OAfAC,qBAAU,YACM,uCAAG,8BAAAzD,EAAA,+EAEKI,MAChB,oDAHW,cAEPK,EAFO,QAKLG,OALK,SAOSH,EAAIC,OAPb,OAOPgD,EAPO,OAQbF,EAASE,EAAQH,OARJ,4GAAH,qDAWdI,KACC,IAGD,qBAAK1C,UAAU,kBAAf,SACE,qBAAKsB,MAAO,CAAEqB,QAAS,OAAQC,IAAK,OAAQC,SAAU,QAAtD,SACGP,GACCA,EAAMQ,KAAI,SAAC5B,GACT,OAAO,cAAC,EAAD,CAAqBA,KAAMA,GAAhBA,EAAKgB,aCkMpBa,EArNE,WAAO,IAAD,EACGrE,qBADH,mBACdwC,EADc,KACR8B,EADQ,OAEWtE,qBAFX,mBAEduE,EAFc,KAEJC,EAFI,OAGexE,oBAAS,GAHxB,mBAGdyE,EAHc,KAGFC,EAHE,OAKsB9E,cAAnCC,EALa,EAKbA,SAAUC,EALG,EAKHA,aAAcC,EALX,EAKWA,OAC5B4E,EAAUC,cACRC,EAAOC,cAAPD,GAENf,qBAAU,YACM,uCAAG,8BAAAzD,EAAA,+EAEKI,MAAM,oDAAD,OAC+BoE,IAHzC,UAKM,OAHb/D,EAFO,QAKLG,OALK,iEAQSH,EAAIC,OARb,OAQPgD,EARO,OASbO,EAAQP,EAAQvB,MATH,4GAAH,qDAYdwB,GAEiB,uCAAG,8BAAA3D,EAAA,+EAEEI,MAAM,oDAAD,OAC+BoE,EAD/B,cAFP,UAKG,OAHb/D,EAFU,QAKRG,OALQ,iEAQMH,EAAIC,OARV,OAQVgD,EARU,OAShBS,EAAYT,EAAQQ,UATJ,4GAAH,oDAYjBQ,GACAL,GAAc,KACb,IAEH,IAAMM,EAAU,uCAAG,WAAO5E,GAAP,mBAAAC,EAAA,6DACXe,EAAQF,aAAa+D,QAAQ,SAC7BC,EAFW,iBAEQ9D,GACnBd,EAAWC,KAAKC,UAAUJ,GAHf,kBAKGK,MAAM,oDAAD,OAC+BoE,GACpD,CACEnE,OAAQ,MACRC,KAAML,EACNM,QAAS,CACPuE,cAAeD,EACf,eAAgB,sBAZP,UAgBI,MAhBJ,OAgBPjE,OAhBO,iDAmBfyD,GAAc,GAnBC,4GAAH,sDAuBVU,EAAU,uCAAG,8BAAA/E,EAAA,6DACXe,EAAQF,aAAa+D,QAAQ,SAC7BC,EAFW,iBAEQ9D,GAFR,kBAIGX,MAAM,oDAAD,OAC+BoE,GACpD,CACEnE,OAAQ,SACRE,QAAS,CACPuE,cAAeD,EACf,eAAgB,sBAVP,UAcI,MAdJ,OAcPjE,OAdO,kEAiBToE,IAjBS,QAkBfV,EAAQW,KAAK,UAlBE,kDAoBfC,QAAQC,MAAR,MApBe,0DAAH,qDAwBVC,EAAa,uCAAG,WAAOC,GAAP,mBAAArF,EAAA,6DACde,EAAQF,aAAa+D,QAAQ,SAC7BC,EAFc,iBAEK9D,GAFL,kBAIAX,MAAM,oDAAD,OAC+BoE,EAD/B,qBAC8Ca,GACnE,CACEhF,OAAQ,SACRE,QAAS,CACPuE,cAAeD,EACf,eAAgB,sBAVJ,UAcC,MAdD,OAcVjE,OAdU,iDAiBZ0E,EAAcpB,EAASqB,QAC3B,SAACC,GAAD,OAAaA,EAAQrC,MAAQkC,KAE/BlB,EAAYmB,GApBM,kDAsBlBJ,QAAQC,MAAR,MAtBkB,0DAAH,sDA0BbH,EAAiB,uCAAG,8BAAAhF,EAAA,6DAClBe,EAAQF,aAAa+D,QAAQ,SAC7BC,EAFkB,iBAEC9D,GAFD,kBAIJX,MAAM,oDAAD,OAC+BoE,EAD/B,aAErB,CACEnE,OAAQ,SACRE,QAAS,CACPuE,cAAeD,EACf,eAAgB,sBAVA,UAcH,MAdG,OAcdjE,OAdc,iDAkBtBuD,EADoB,IAjBE,kDAoBtBe,QAAQC,MAAR,MApBsB,0DAAH,qDAwBvB,OACE,sBAAKlE,UAAU,SAAf,UACGkB,EACC,8BACE,eAACnB,EAAA,EAAD,WACE,eAACA,EAAA,EAAKE,MAAN,WACE,cAACF,EAAA,EAAKG,MAAN,CAAYC,QAAQ,QAApB,oBACA,cAACJ,EAAA,EAAKK,QAAN,CACEK,IAAKlC,EAAS,CAAEmC,SAAU,mBAC1BJ,KAAK,QACLkE,aAActD,EAAKY,QAEpBrD,EAAOqD,OAAS,cAAC/B,EAAA,EAAKa,KAAN,gCAEnB,eAACb,EAAA,EAAKE,MAAN,WACE,cAACF,EAAA,EAAKG,MAAN,CAAYC,QAAQ,OAApB,mBACA,cAACJ,EAAA,EAAKK,QAAN,CACEqE,GAAG,WACHnE,KAAK,OACLG,IAAKlC,EAAS,CAAEmC,SAAU,mBAC1B8D,aAActD,EAAKkB,OAEpB3D,EAAO2D,MAAQ,cAACrC,EAAA,EAAKa,KAAN,gCAGlB,eAACb,EAAA,EAAKE,MAAN,WACE,cAACF,EAAA,EAAKG,MAAN,CAAYC,QAAQ,cAApB,qBACA,cAACJ,EAAA,EAAKK,QAAN,CACEE,KAAK,cACLG,IAAKlC,EAAS,CAAEmC,SAAU,mBAC1B8D,aAActD,EAAKwD,cAEpBjG,EAAOiG,aAAe,cAAC3E,EAAA,EAAKa,KAAN,gCAExBuC,GAAc,cAACpD,EAAA,EAAKa,KAAN,oCAEf,eAACb,EAAA,EAAKE,MAAN,WACG,IACD,cAACc,EAAA,EAAD,CACER,KAAK,SACLS,QAAqCxC,EAAakF,GAFpD,oBAMA,cAAC3C,EAAA,EAAD,CACEO,MAAO,CAAEqD,OAAQ,QACjB5C,QAAQ,SACRf,QAAS8C,EAHX,iCAWN,2CAEDb,GAAY,0CACZA,GACCA,EAASH,KAAI,SAACyB,GACZ,OACE,gCACE,4BAAIA,EAAQnC,OACZ,cAACrB,EAAA,EAAD,CACEgB,QAAQ,SACRf,QAAS,kBAAMmD,EAAcI,EAAQrC,MAFvC,sBAFQqC,EAAQrC,YChIf0C,EAtEC,WAAO,IAAD,EACgBlG,oBAAS,GADzB,mBACbyE,EADa,KACDC,EADC,OAEuB9E,cAAnCC,EAFY,EAEZA,SAAUC,EAFE,EAEFA,aAAcC,EAFZ,EAEYA,OAC5B4E,EAAUC,cAERI,EAAU,uCAAG,WAAO5E,GAAP,mBAAAC,EAAA,6DACXe,EAAQF,aAAa+D,QAAQ,SAC7BC,EAFW,iBAEQ9D,GACnBd,EAAWC,KAAKC,UAAUJ,GAHf,kBAKGK,MAAM,oDAEtB,CACEC,OAAQ,OACRC,KAAML,EACNM,QAAS,CACPuE,cAAeD,EACf,eAAgB,sBAZP,UAgBI,MAhBJ,OAgBPjE,OAhBO,iDAmBf0D,EAAQW,KAAK,UACbZ,GAAc,GApBC,4GAAH,sDAuBhB,OACE,8BACE,eAACrD,EAAA,EAAD,WACE,eAACA,EAAA,EAAKE,MAAN,WACE,cAACF,EAAA,EAAKG,MAAN,CAAYC,QAAQ,QAApB,oBACA,cAACJ,EAAA,EAAKK,QAAN,CACEK,IAAKlC,EAAS,CAAEmC,SAAU,mBAC1BJ,KAAK,UAEN7B,EAAOqD,OAAS,cAAC/B,EAAA,EAAKa,KAAN,gCAGnB,eAACb,EAAA,EAAKE,MAAN,WACE,cAACF,EAAA,EAAKG,MAAN,CAAYC,QAAQ,OAApB,mBACA,cAACJ,EAAA,EAAKK,QAAN,CACEqE,GAAG,WACHnE,KAAK,OACLG,IAAKlC,EAAS,CAAEmC,SAAU,qBAE3BjC,EAAO2D,MAAQ,cAACrC,EAAA,EAAKa,KAAN,gCAGlB,eAACb,EAAA,EAAKE,MAAN,WACE,cAACF,EAAA,EAAKG,MAAN,CAAYC,QAAQ,cAApB,qBACA,cAACJ,EAAA,EAAKK,QAAN,CACEE,KAAK,cACLG,IAAKlC,EAAS,CAAEmC,SAAU,qBAE3BjC,EAAOiG,aAAe,cAAC3E,EAAA,EAAKa,KAAN,gCAEzB,cAACG,EAAA,EAAD,CACER,KAAK,SACLS,QAAqCxC,EAAakF,GAFpD,oBAMCP,GAAc,cAACpD,EAAA,EAAKa,KAAN,2C,wBCnCRiE,EA7BA,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUzG,EAAkB,EAAlBA,YAM1B,OACE,eAAC0G,EAAA,EAAD,WACE,eAACA,EAAA,EAAOC,MAAR,WACG,IACD,6CAEF,eAACC,EAAA,EAAD,CAAKjF,UAAU,UAAf,UACE,cAAC,gBAAD,CAAegC,GAAG,SAAlB,SACE,cAACiD,EAAA,EAAIC,KAAL,qBAEF,cAAC,gBAAD,CAAelD,GAAG,WAAlB,SACE,cAACiD,EAAA,EAAIC,KAAL,4BAGHJ,GACC,cAAC/D,EAAA,EAAD,CAAQgB,QAAQ,kBAAkBf,QApBzB,WACb3C,GAAY,GACZuB,aAAauF,SAkBT,wB,wBCwCOC,MAxDf,WAAmB,IAAD,EACgB1G,oBAAS,GADzB,mBACToG,EADS,KACCzG,EADD,KAYhB,OATAmE,qBAAU,WACR,IAAM6C,EAAOzF,aAAa+D,QAAQ,YAEhCtF,IADEgH,KAKH,IAGD,mCACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACG,IACD,cAAC,EAAD,CACEV,SAAUA,EACVzG,YAAaA,EACb2B,UAAU,QAEZ,eAAC,IAAD,WACG,IACD,cAAC,IAAD,CAAOyF,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,IAAD,CAAU1D,GAAG,aAEf,cAAC,IAAD,CAAOyD,OAAK,EAACC,KAAK,SAAlB,SACIZ,EAAqD,cAAC,EAAD,IAA1C,cAACa,EAAD,CAAWtH,YAAaA,MAEvC,cAAC,IAAD,CAAOoH,OAAK,EAACC,KAAK,aAAlB,SACIZ,EAGA,cAAC,EAAD,IAFA,cAACa,EAAD,CAAWtH,YAAaA,MAK5B,cAAC,IAAD,CAAOqH,KAAK,WAAZ,SACIZ,EAGA,cAAC,EAAD,IAFA,cAACa,EAAD,CAAWtH,YAAaA,MAK5B,cAAC,IAAD,CAAOqH,KAAK,IAAZ,SACE,mDC7CDE,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCCdQ,IAASC,OACP,cAAC,aAAD,CAAYC,SAAS,IAArB,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8cc9dc8a.chunk.js","sourcesContent":["import { React, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nconst LoginForm = ({ setUserAuth }) => {\n  const { register, handleSubmit, errors } = useForm();\n  const [loginErr, setLoginErr] = useState(false);\n\n  const onSubmit = async (data) => {\n    const formData = JSON.stringify(data);\n    try {\n      const req = await fetch(\n        \"https://dovimaj-blog-api.herokuapp.com/api/login\",\n        {\n          method: \"POST\",\n          body: formData,\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      const myJson = await req.json();\n      if (req.status !== 200) {\n        setLoginErr(true);\n        return;\n      }\n      localStorage.setItem(\"token\", myJson.token);\n      localStorage.setItem(\"userAuth\", true);\n      setUserAuth(true);\n    } catch (err) {\n      setLoginErr(true);\n    }\n  };\n\n  return (\n    <Form className=\"layout\">\n      <h3>Login</h3>\n      <Form.Group>\n        <Form.Label htmlFor=\"author_name\">User:</Form.Label>\n        <Form.Control\n          autoComplete=\"username\"\n          name=\"username\"\n          type=\"text\"\n          placeholder=\"Name\"\n          ref={register({ required: \"required field\" })}\n        ></Form.Control>\n        {errors.username && <Form.Text>{errors.username.message}</Form.Text>}\n      </Form.Group>\n\n      <Form.Group>\n        <Form.Label htmlFor=\"password\" placeholder=\"password\">\n          Password:\n        </Form.Label>\n        <Form.Control\n          autoComplete=\"current-password\"\n          name=\"password\"\n          type=\"password\"\n          ref={register({ required: \"required field\" })}\n        ></Form.Control>\n\n        {errors.password && <Form.Text>{errors.password.message} </Form.Text>}\n      </Form.Group>\n\n      {loginErr && <Form.Text>Username or password incorrect</Form.Text>}\n      <Button\n        type=\"submit\"\n        onClick={((e) => e.preventDefault(), handleSubmit(onSubmit))}\n      >\n        Login\n      </Button>\n    </Form>\n  );\n};\n\nexport default LoginForm;\n","import React from \"react\";\nimport { useRouteMatch, Link } from \"react-router-dom\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\n\nconst Post = ({ post }) => {\n  let match = useRouteMatch();\n  return (\n    <Card\n      style={{\n        width: \"18rem\",\n        padding: \"30px\",\n        borderRadius: \"20px\",\n        maxHeight: \"410px\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n      }}\n    >\n      <Card.Title>{post.title}</Card.Title>\n      <Button variant=\"link\">\n        <Link to={`${match.url}/${post._id}`}>Edit Post </Link>\n      </Button>\n      <Card.Body>{post.text} </Card.Body>\n    </Card>\n  );\n};\n\nexport default Post;\n","import React, { useEffect, useState } from \"react\";\nimport Post from \"../components/Post\";\n\nconst Home = () => {\n  const [posts, setPosts] = useState();\n  useEffect(() => {\n    const getPosts = async () => {\n      try {\n        const req = await fetch(\n          \"https://dovimaj-blog-api.herokuapp.com/api/posts\"\n        );\n        if (req.status !== 200) {\n        }\n        const reqJson = await req.json();\n        setPosts(reqJson.posts);\n      } catch (err) {}\n    };\n    getPosts();\n  }, []);\n\n  return (\n    <div className=\"postList layout\">\n      <div style={{ display: \"flex\", gap: \"20px\", flexWrap: \"wrap\" }}>\n        {posts &&\n          posts.map((post) => {\n            return <Post key={post._id} post={post} />;\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nconst EditPost = () => {\n  const [post, setPost] = useState();\n  const [comments, setComments] = useState();\n  const [successMsg, setSuccessMsg] = useState(false);\n\n  const { register, handleSubmit, errors } = useForm();\n  let history = useHistory();\n  let { id } = useParams();\n\n  useEffect(() => {\n    const getPosts = async () => {\n      try {\n        const req = await fetch(\n          `https://dovimaj-blog-api.herokuapp.com/api/posts/${id}`\n        );\n        if (req.status !== 200) {\n          return;\n        }\n        const reqJson = await req.json();\n        setPost(reqJson.post);\n      } catch (err) {}\n    };\n    getPosts();\n\n    const getComments = async () => {\n      try {\n        const req = await fetch(\n          `https://dovimaj-blog-api.herokuapp.com/api/posts/${id}/comments`\n        );\n        if (req.status !== 200) {\n          return;\n        }\n        const reqJson = await req.json();\n        setComments(reqJson.comments);\n      } catch (err) {}\n    };\n    getComments();\n    setSuccessMsg(false);\n  }, []);\n\n  const submitForm = async (data) => {\n    const token = localStorage.getItem(\"token\");\n    const bearer = `Bearer ${token}`;\n    const formData = JSON.stringify(data);\n    try {\n      const req = await fetch(\n        `https://dovimaj-blog-api.herokuapp.com/api/posts/${id}`,\n        {\n          method: \"PUT\",\n          body: formData,\n          headers: {\n            Authorization: bearer,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      if (req.status !== 200) {\n        return;\n      }\n      setSuccessMsg(true);\n    } catch (err) {}\n  };\n\n  const deletePost = async () => {\n    const token = localStorage.getItem(\"token\");\n    const bearer = `Bearer ${token}`;\n    try {\n      const req = await fetch(\n        `https://dovimaj-blog-api.herokuapp.com/api/posts/${id}`,\n        {\n          method: \"delete\",\n          headers: {\n            Authorization: bearer,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      if (req.status !== 200) {\n        return;\n      }\n      await deleteAllComments();\n      history.push(\"/posts\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const deleteComment = async (commentId) => {\n    const token = localStorage.getItem(\"token\");\n    const bearer = `Bearer ${token}`;\n    try {\n      const req = await fetch(\n        `https://dovimaj-blog-api.herokuapp.com/api/posts/${id}/comments/${commentId}`,\n        {\n          method: \"delete\",\n          headers: {\n            Authorization: bearer,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      if (req.status !== 200) {\n        return;\n      }\n      const newComments = comments.filter(\n        (comment) => comment._id !== commentId\n      );\n      setComments(newComments);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const deleteAllComments = async () => {\n    const token = localStorage.getItem(\"token\");\n    const bearer = `Bearer ${token}`;\n    try {\n      const req = await fetch(\n        `https://dovimaj-blog-api.herokuapp.com/api/posts/${id}/comments`,\n        {\n          method: \"delete\",\n          headers: {\n            Authorization: bearer,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      if (req.status !== 200) {\n        return;\n      }\n      const newComments = {};\n      setComments(newComments);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"layout\">\n      {post ? (\n        <div>\n          <Form>\n            <Form.Group>\n              <Form.Label htmlFor=\"title\">Title:</Form.Label>\n              <Form.Control\n                ref={register({ required: \"required field\" })}\n                name=\"title\"\n                defaultValue={post.title}\n              ></Form.Control>\n              {errors.title && <Form.Text>Required field</Form.Text>}\n            </Form.Group>\n            <Form.Group>\n              <Form.Label htmlFor=\"text\">Post:</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                name=\"text\"\n                ref={register({ required: \"required field\" })}\n                defaultValue={post.text}\n              ></Form.Control>\n              {errors.text && <Form.Text>Required field</Form.Text>}\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label htmlFor=\"author_name\">Author:</Form.Label>\n              <Form.Control\n                name=\"author_name\"\n                ref={register({ required: \"required field\" })}\n                defaultValue={post.author_name}\n              ></Form.Control>\n              {errors.author_name && <Form.Text>Required field</Form.Text>}\n            </Form.Group>\n            {successMsg && <Form.Text>Updated successfully!</Form.Text>}\n\n            <Form.Group>\n              {\" \"}\n              <Button\n                type=\"submit\"\n                onClick={((e) => e.preventDefault(), handleSubmit(submitForm))}\n              >\n                Update\n              </Button>\n              <Button\n                style={{ margin: \"20px\" }}\n                variant=\"danger\"\n                onClick={deletePost}\n              >\n                Delete post\n              </Button>\n            </Form.Group>\n          </Form>\n        </div>\n      ) : (\n        <p>Loading...</p>\n      )}\n      {comments && <p>Comments:</p>}\n      {comments &&\n        comments.map((comment) => {\n          return (\n            <div key={comment._id}>\n              <p>{comment.text}</p>\n              <Button\n                variant=\"danger\"\n                onClick={() => deleteComment(comment._id)}\n              >\n                Delete\n              </Button>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default EditPost;\n","import { useState, React } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nconst NewPost = () => {\n  const [successMsg, setSuccessMsg] = useState(false);\n  const { register, handleSubmit, errors } = useForm();\n  let history = useHistory();\n\n  const submitForm = async (data) => {\n    const token = localStorage.getItem(\"token\");\n    const bearer = `Bearer ${token}`;\n    const formData = JSON.stringify(data);\n    try {\n      const req = await fetch(\n        `https://dovimaj-blog-api.herokuapp.com/api/posts/`,\n        {\n          method: \"post\",\n          body: formData,\n          headers: {\n            Authorization: bearer,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      if (req.status !== 200) {\n        return;\n      }\n      history.push(\"/posts\");\n      setSuccessMsg(true);\n    } catch (err) {}\n  };\n  return (\n    <div>\n      <Form>\n        <Form.Group>\n          <Form.Label htmlFor=\"title\">Title:</Form.Label>\n          <Form.Control\n            ref={register({ required: \"required field\" })}\n            name=\"title\"\n          ></Form.Control>\n          {errors.title && <Form.Text>Required field</Form.Text>}\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"text\">Text:</Form.Label>\n          <Form.Control\n            as=\"textarea\"\n            name=\"text\"\n            ref={register({ required: \"required field\" })}\n          ></Form.Control>\n          {errors.text && <Form.Text>Required field</Form.Text>}\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"author_name\">Author:</Form.Label>\n          <Form.Control\n            name=\"author_name\"\n            ref={register({ required: \"required field\" })}\n          ></Form.Control>\n          {errors.author_name && <Form.Text>Required field</Form.Text>}\n        </Form.Group>\n        <Button\n          type=\"submit\"\n          onClick={((e) => e.preventDefault(), handleSubmit(submitForm))}\n        >\n          Update\n        </Button>\n        {successMsg && <Form.Text>Submited successfully!</Form.Text>}\n      </Form>\n    </div>\n  );\n};\n\nexport default NewPost;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nconst theNav = ({ userAuth, setUserAuth }) => {\n  const logout = () => {\n    setUserAuth(false);\n    localStorage.clear();\n  };\n\n  return (\n    <Navbar>\n      <Navbar.Brand>\n        {\" \"}\n        <h1>Blog CMS</h1>\n      </Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <LinkContainer to=\"/posts\">\n          <Nav.Link>Home</Nav.Link>\n        </LinkContainer>\n        <LinkContainer to=\"/newpost\">\n          <Nav.Link>New Post</Nav.Link>\n        </LinkContainer>\n      </Nav>\n      {userAuth && (\n        <Button variant=\"outline-success\" onClick={logout}>\n          Logout\n        </Button>\n      )}\n    </Navbar>\n  );\n};\n\nexport default theNav;\n","import { Route, HashRouter, Switch, Redirect } from \"react-router-dom\";\nimport LoginPage from \"./pages/LoginPage\";\nimport Home from \"./pages/Home.jsx\";\nimport { useEffect, useState } from \"react\";\nimport PostPage from \"./pages/EditPost\";\nimport NewPost from \"./pages/NewPost\";\nimport Nav from \"./components/Nav\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nfunction Routes() {\n  const [userAuth, setUserAuth] = useState(false);\n\n  useEffect(() => {\n    const user = localStorage.getItem(\"userAuth\");\n    if (user) {\n      setUserAuth(true);\n    } else {\n      setUserAuth(false);\n    }\n  }, []);\n\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col>\n            {\" \"}\n            <Nav\n              userAuth={userAuth}\n              setUserAuth={setUserAuth}\n              className=\"Nav\"\n            />\n            <Switch>\n              {\" \"}\n              <Route exact path=\"/\">\n                <Redirect to=\"/posts\" />\n              </Route>\n              <Route exact path=\"/posts\">\n                {!userAuth ? <LoginPage setUserAuth={setUserAuth} /> : <Home />}\n              </Route>\n              <Route exact path=\"/posts/:id\">\n                {!userAuth ? (\n                  <LoginPage setUserAuth={setUserAuth} />\n                ) : (\n                  <PostPage />\n                )}\n              </Route>\n              <Route path=\"/newpost\">\n                {!userAuth ? (\n                  <LoginPage setUserAuth={setUserAuth} />\n                ) : (\n                  <NewPost />\n                )}\n              </Route>\n              <Route path=\"/\">\n                <p>404</p>\n              </Route>\n            </Switch>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default Routes;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport Routes from \"./Routes\";\nimport \"./index.css\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <HashRouter basename=\"/\">\n    <Routes />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}